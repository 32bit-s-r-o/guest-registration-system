version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: guest_registration_db
    environment:
      POSTGRES_DB: guest_registration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - guest_registration_network

  # Main Application (includes setup and migrations)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64   # x86_64 architecture (Intel/AMD 64-bit)
        - linux/arm64   # ARM 64-bit (Apple Silicon, ARM servers)
    container_name: guest_registration_app
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5433}/guest_registration
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-True}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - UPLOAD_FOLDER=/app/static/uploads
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
      - DOCKER_ENV=true
      # Gunicorn Configuration
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_WORKER_CLASS=${GUNICORN_WORKER_CLASS:-sync}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-120}
      - GUNICORN_KEEP_ALIVE=${GUNICORN_KEEP_ALIVE:-2}
      - GUNICORN_MAX_REQUESTS=${GUNICORN_MAX_REQUESTS:-1000}
      - GUNICORN_MAX_REQUESTS_JITTER=${GUNICORN_MAX_REQUESTS_JITTER:-100}
      - APP_PORT=${APP_PORT:-5000}
      - APP_EXTERNAL_PORT=${APP_EXTERNAL_PORT:-8000}
    volumes:
      - app_uploads:/app/static/uploads
      - app_logs:/app/logs
    ports:
      - "${APP_EXTERNAL_PORT:-8000}:${APP_PORT:-5000}"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-5000}/health/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - guest_registration_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: guest_registration_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - app_uploads:/app/static/uploads:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - guest_registration_network

volumes:
  postgres_data:
  app_uploads:
  app_logs:

networks:
  guest_registration_network:
    driver: bridge 