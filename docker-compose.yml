version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: guest_registration_db
    environment:
      POSTGRES_DB: guest_registration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - guest_registration_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: guest_registration_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - guest_registration_network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64  # x86_64 architecture
        - linux/arm64  # ARM 64-bit (Apple Silicon, ARM servers)
        - linux/arm/v7 # ARM 32-bit (Raspberry Pi, ARM devices)
    container_name: guest_registration_app
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/guest_registration
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-True}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - UPLOAD_FOLDER=/app/static/uploads
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
    volumes:
      - app_uploads:/app/static/uploads
      - app_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - guest_registration_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: guest_registration_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - app_uploads:/app/static/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - guest_registration_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  guest_registration_network:
    driver: bridge 